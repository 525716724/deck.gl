'use strict'; // code generated by pbf v3.2.1

// Coords ========================================

var Coords = {};

Coords.read = function(pbf, end) {
  return pbf.readFields(Coords._readField, {value: [], size: 0}, end);
};
Coords._readField = function(tag, obj, pbf) {
  if (tag === 1) pbf.readPackedDouble(obj.value);
  else if (tag === 2) obj.size = pbf.readVarint(true);
};
Coords.write = function(obj, pbf) {
  if (obj.value) pbf.writePackedDouble(1, obj.value);
  if (obj.size) pbf.writeVarintField(2, obj.size);
};

// Points ========================================

var Points = {};

Points.read = function(pbf, end) {
  return pbf.readFields(Points._readField, {positions: null}, end);
};
Points._readField = function(tag, obj, pbf) {
  if (tag === 1) obj.positions = Coords.read(pbf, pbf.readVarint() + pbf.pos);
};
Points.write = function(obj, pbf) {
  if (obj.positions) pbf.writeMessage(1, Coords.write, obj.positions);
};

// Lines ========================================

var Lines = {};

Lines.read = function(pbf, end) {
  return pbf.readFields(Lines._readField, {positions: null, pathIndices: null}, end);
};
Lines._readField = function(tag, obj, pbf) {
  if (tag === 1) obj.positions = Coords.read(pbf, pbf.readVarint() + pbf.pos);
  else if (tag === 2) obj.pathIndices = Coords.read(pbf, pbf.readVarint() + pbf.pos);
};
Lines.write = function(obj, pbf) {
  if (obj.positions) pbf.writeMessage(1, Coords.write, obj.positions);
  if (obj.pathIndices) pbf.writeMessage(2, Coords.write, obj.pathIndices);
};

// Polygons ========================================

var Polygons = {};

Polygons.read = function(pbf, end) {
  return pbf.readFields(Polygons._readField, {positions: null, polygonIndices: null}, end);
};
Polygons._readField = function(tag, obj, pbf) {
  if (tag === 1) obj.positions = Coords.read(pbf, pbf.readVarint() + pbf.pos);
  else if (tag === 2) obj.polygonIndices = Coords.read(pbf, pbf.readVarint() + pbf.pos);
};
Polygons.write = function(obj, pbf) {
  if (obj.positions) pbf.writeMessage(1, Coords.write, obj.positions);
  if (obj.polygonIndices) pbf.writeMessage(2, Coords.write, obj.polygonIndices);
};

// Tile ========================================

var Tile = {};

Tile.read = function(pbf, end) {
  return pbf.readFields(Tile._readField, {points: null, lines: null, polygons: null}, end);
};
Tile._readField = function(tag, obj, pbf) {
  if (tag === 1) obj.points = Points.read(pbf, pbf.readVarint() + pbf.pos);
  else if (tag === 2) obj.lines = Lines.read(pbf, pbf.readVarint() + pbf.pos);
  else if (tag === 3) obj.polygons = Polygons.read(pbf, pbf.readVarint() + pbf.pos);
};
Tile.write = function(obj, pbf) {
  if (obj.points) pbf.writeMessage(1, Points.write, obj.points);
  if (obj.lines) pbf.writeMessage(2, Lines.write, obj.lines);
  if (obj.polygons) pbf.writeMessage(3, Polygons.write, obj.polygons);
};

export default Tile;
